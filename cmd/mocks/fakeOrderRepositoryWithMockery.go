// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	request "simple-order-api/cmd/models/request"

	response "simple-order-api/cmd/models/response"
)

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: createOrderRequest
func (_m *MockOrderRepository) CreateOrder(createOrderRequest request.CreateOrderRequest) *response.ErrorResponse {
	ret := _m.Called(createOrderRequest)

	var r0 *response.ErrorResponse
	if rf, ok := ret.Get(0).(func(request.CreateOrderRequest) *response.ErrorResponse); ok {
		r0 = rf(createOrderRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.ErrorResponse)
		}
	}

	return r0
}

// DeleteOrder provides a mock function with given fields: orderNumber
func (_m *MockOrderRepository) DeleteOrder(orderNumber string) *response.ErrorResponse {
	ret := _m.Called(orderNumber)

	var r0 *response.ErrorResponse
	if rf, ok := ret.Get(0).(func(string) *response.ErrorResponse); ok {
		r0 = rf(orderNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.ErrorResponse)
		}
	}

	return r0
}

// FetchOrderByOrderNumber provides a mock function with given fields: orderNumber
func (_m *MockOrderRepository) FetchOrderByOrderNumber(orderNumber string) (*response.Order, *response.ErrorResponse) {
	ret := _m.Called(orderNumber)

	var r0 *response.Order
	if rf, ok := ret.Get(0).(func(string) *response.Order); ok {
		r0 = rf(orderNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Order)
		}
	}

	var r1 *response.ErrorResponse
	if rf, ok := ret.Get(1).(func(string) *response.ErrorResponse); ok {
		r1 = rf(orderNumber)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ErrorResponse)
		}
	}

	return r0, r1
}

// FetchOrders provides a mock function with given fields:
func (_m *MockOrderRepository) FetchOrders() ([]response.Order, *response.ErrorResponse) {
	ret := _m.Called()

	var r0 []response.Order
	if rf, ok := ret.Get(0).(func() []response.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.Order)
		}
	}

	var r1 *response.ErrorResponse
	if rf, ok := ret.Get(1).(func() *response.ErrorResponse); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ErrorResponse)
		}
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: orderNumber, updateOrderRequest
func (_m *MockOrderRepository) UpdateOrder(orderNumber string, updateOrderRequest request.UpdateOrderRequest) *response.ErrorResponse {
	ret := _m.Called(orderNumber, updateOrderRequest)

	var r0 *response.ErrorResponse
	if rf, ok := ret.Get(0).(func(string, request.UpdateOrderRequest) *response.ErrorResponse); ok {
		r0 = rf(orderNumber, updateOrderRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.ErrorResponse)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockOrderRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockOrderRepository(t mockConstructorTestingTNewMockOrderRepository) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
